{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "38856a28-c550-448c-b8e6-6bffa67c743d",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'Whisper' from 'whisper' (D:\\codes\\python\\notebooks\\vision\\whisper.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 5\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mlibrosa\u001b[39;00m\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mwhisper\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Whisper\n\u001b[0;32m      7\u001b[0m \u001b[38;5;66;03m# Whisper small model configuration\u001b[39;00m\n\u001b[0;32m      8\u001b[0m dims \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m      9\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_mels\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;241m80\u001b[39m, \n\u001b[0;32m     10\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_audio_ctx\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;241m3000\u001b[39m, \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     18\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_vocab\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;241m50257\u001b[39m\n\u001b[0;32m     19\u001b[0m }\n",
      "\u001b[1;31mImportError\u001b[0m: cannot import name 'Whisper' from 'whisper' (D:\\codes\\python\\notebooks\\vision\\whisper.py)"
     ]
    }
   ],
   "source": [
    "\n",
    "import pyaudio\n",
    "import numpy as np\n",
    "import torch\n",
    "import librosa\n",
    "from whisper import Whisper\n",
    "\n",
    "# Whisper small model configuration\n",
    "dims = {\n",
    "    \"n_mels\": 80, \n",
    "    \"n_audio_ctx\": 3000, \n",
    "    \"n_audio_state\": 512, \n",
    "    \"n_audio_head\": 8, \n",
    "    \"n_audio_layer\": 6,\n",
    "    \"n_text_ctx\": 448, \n",
    "    \"n_text_state\": 512, \n",
    "    \"n_text_head\": 8, \n",
    "    \"n_text_layer\": 6,\n",
    "    \"n_vocab\": 50257\n",
    "}\n",
    "whisper_model = Whisper(dims)\n",
    "\n",
    "# Audio capture parameters\n",
    "RATE = 16000\n",
    "CHUNK_DURATION = 2  # 2 seconds per audio chunk\n",
    "CHUNK_SIZE = RATE * CHUNK_DURATION\n",
    "CHANNELS = 1\n",
    "FORMAT = pyaudio.paInt16\n",
    "\n",
    "# Set up the PyAudio stream\n",
    "audio_interface = pyaudio.PyAudio()\n",
    "stream = audio_interface.open(\n",
    "    format=FORMAT,\n",
    "    channels=CHANNELS,\n",
    "    rate=RATE,\n",
    "    input=True,\n",
    "    frames_per_buffer=CHUNK_SIZE\n",
    ")\n",
    "\n",
    "def preprocess_audio(audio_chunk):\n",
    "    \"\"\"\n",
    "    Preprocess the audio into mel spectrogram format compatible with Whisper.\n",
    "    \"\"\"\n",
    "    # Convert raw audio chunk to float32 and normalize\n",
    "    audio_chunk = np.frombuffer(audio_chunk, dtype=np.int16).astype(np.float32) / 32768.0\n",
    "    \n",
    "    # Compute STFT and mel spectrogram\n",
    "    stft = librosa.stft(audio_chunk, n_fft=400, hop_length=160, window='hann', dtype=np.float32)\n",
    "    magnitudes = np.abs(stft) ** 2\n",
    "    mel_filter = librosa.filters.mel(sr=RATE, n_fft=400, n_mels=80)\n",
    "    mel_spec = mel_filter @ magnitudes\n",
    "\n",
    "    # Log-mel spectrogram\n",
    "    mel_spec = np.log(mel_spec + 1e-10)\n",
    "\n",
    "    # Normalize the mel spectrogram\n",
    "    mel_spec = (mel_spec - np.mean(mel_spec)) / np.std(mel_spec)\n",
    "\n",
    "    return mel_spec.T\n",
    "\n",
    "def transcribe_chunk(mel_spec):\n",
    "    \"\"\"\n",
    "    Pass the preprocessed mel spectrogram to the Whisper model and return transcription.\n",
    "    \"\"\"\n",
    "    with torch.no_grad():\n",
    "        # Ensure the input is shaped correctly for the Whisper model\n",
    "        mel_spec_tensor = torch.tensor(mel_spec).unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions\n",
    "        \n",
    "        # Encode the audio\n",
    "        encoded_audio = whisper_model.encoder(mel_spec_tensor)\n",
    "\n",
    "        # For demonstration, we're using a hardcoded \"dummy\" input token to simulate transcription.\n",
    "        dummy_input = torch.tensor([0])  # Example token for the language model input\n",
    "\n",
    "        # Decode the audio using the model's decoder\n",
    "        transcription = whisper_model.decoder(dummy_input, 0, encoded_audio)\n",
    "\n",
    "    return transcription\n",
    "\n",
    "print(\"Live transcription started...\")\n",
    "\n",
    "# Main loop to capture audio and transcribe in real time\n",
    "try:\n",
    "    while True:\n",
    "        # Read audio data from the microphone\n",
    "        audio_data = stream.read(CHUNK_SIZE, exception_on_overflow=False)\n",
    "        \n",
    "        # Preprocess the audio to mel spectrogram\n",
    "        mel_spectrogram = preprocess_audio(audio_data)\n",
    "        \n",
    "        # Transcribe the audio chunk\n",
    "        transcription = transcribe_chunk(mel_spectrogram)\n",
    "        \n",
    "        # Output the transcription\n",
    "        print(\"Transcription:\", transcription)\n",
    "\n",
    "except KeyboardInterrupt:\n",
    "    print(\"Stopping transcription...\")\n",
    "\n",
    "finally:\n",
    "    # Clean up resources\n",
    "    stream.stop_stream()\n",
    "    stream.close()\n",
    "    audio_interface.terminate()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1be12fc-7daa-4454-a1f0-1a1735e16ff7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
